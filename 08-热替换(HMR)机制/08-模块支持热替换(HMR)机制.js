/**
 * 使用 Webpack Dev Server ,可以自动监听代码的变化然后自动进行打包,最后通过
 * 自动刷新的方式同步到浏览器以便于即使预览,如下:
 * 
 * 08.1 示例图
 */

/**
 * 一, 自动刷新的问题
 * 当实际去使用 Webpack Dev Server 自动刷新的特性去完成具体的开发任务时,就会发现还有一些不舒服
 * 的地方.
 * 
 * 例如, 这里是一个编辑器应用,要即时调试这个编辑器的内容文本的样式,正常操作肯定是:
 * 先尝试在编辑器里面去添加一些文本,作为展示样例,再回到开发工具中,找到控制编辑器样式的CSS文件,然后
 * 进行编辑,如下:
 * 
 * 08.2 示例图
 * 
 * 发现问题:
 * 当修改编辑器文本对应的样式过后,原本想着可以即时看到最新的界面效果,但这时编辑器中的内容却没有了.
 * 
 * 这时就不得不再次回到应用中农再来添加一些测试文本,查看样式效果. 如果修改后还是对样式不满意,还需要
 * 继续调整样式, [调整之后又会面临文本内容丢失的问题]. 久而久之你就会发现,自动刷新这个功能还是有点鸡肋,
 * 并没有想象的那么好用.
 * 
 * 出现这个问题的原因,是因为每次修改完代码,Webpack都可以监视到变化,然后自动打包,在通知浏览器自动刷新,
 * 一旦页面整体刷新,那页面中的任何操作状态都将会丢失,所以才会出现以上情况.
 * 
 * 解决问题最好方法:
 * 是能够实现在页面不刷新的情况下,代码也可以及时的更新到浏览器的页面中,重新执行,避免页面状态丢失.针对
 * 这个需求,Webpack同样可以满足.
 */

/**
 * 二, 模块热替换(HMR)
 * 全称 Hot Module Replacement, 叫做"模块热替换"或"模块热更新"
 * 
 * Webpack中的模块热替换,指的是我们可以应用运行过程中,实时的去替换应用中的某个模块,而应用的运行状态
 * 不会因此而改变. 例如,在应用运行过程中修改了某个模块,通过自动刷新会导致整个应用的整体刷新,那页面中
 * 的状态信息都会丢失;而如果使用的是 HMR, 就可以实现只将修改的模块实时替换至应用中,不必完全刷新整个
 * 应用.
 * 
 * 这里可以对比一下使用热更新和使用自动刷新两种方式之间的体验差异,尝试在项目中开启HMR特性,如下:
 * 
 * 08.3 示例图
 * 
 * 有了HMR支持后,同样先在页面中随意添加一些内容,也就是为页面制造一些运行状态,然后回到开发工具中,再来尝试
 * 修改文本的样式,保存过后页面并没有整体刷新,而且我们能立即看到最新的样式.这种体验相对于自动刷新会友好很多.
 * 
 * HMR对于项目中其他代码文件的修改,也可以有相同的热更新体验. 你可以再去尝试修改一下JS文件,保存过后,浏览器
 * 中同样不会刷新页面,而是直接执行了刚刚修改的这个模块,具体效果如下:
 * 
 * 08.4 示例图
 * 
 * 不仅如此,对于非文本文件同样也可以使用热更新.例如这个案例中显示的Logo图片,如果你在外部修改了它,同样也可以
 * 及时更新到浏览器中.
 * 
 * 那这就是HMR的作用和体验,HMR可以算是Webpack中最为强大的特性之一,而且也是最受欢迎的特性.
 */


/**
 * 三, 开启HMR
 * HMR已经集成在了webpack模块中,所以不需要再单独安装什么模块.
 * 使用这个特性最简单的方式就是,在运行 webpack-dev-server命令时,通过 --hot参数去开启这个特性.
 * 
 * 或者也可以在配置文件中通过添加对应的配置来开启这个功能. 那我们这里打开配置文件,这里需要配置两个地方:
 * 
 * > 首先需要将 devServer 对象中的 hot 属性设置为 true;
 * > 然后需要载入一个插件,这个插件是webpack内置的一个插件,所以我们先导入webpack模块,有了这个模块过后,这
 *   里使用的是一个叫做 HotModuleReplacementPlugin的插件.
 * 
 * 具体配置代码如下:
 * //   ./webpack.config.js
 * const webpack = require('webpack')
 * module.exports = {
 *    // ...
 *    devServer: {
 *        //开启 HMR 特性,如果资源不支持 HMR 会 fallback 到 live reloading
 *        hot:true
 *        // 只使用 HMR, 不会 fallback 到 live reloading
 *        // hotOnly: true
 *    },
 *    plugins: [
 *        // ...
 *        // HMR 特性所需要的插件
 *        new webpack.HotModuleReplacementPlugin()
 *    ]
 * }
 * 
 * 配置完成以后,打开命令行终端,运行webpack-dev-server,启动开发服务端. 那接下来你就可以来体验HMR了.
 * 回到开发工具中,这里先来尝试修改一下CSS文件. 样式文件修改保存过后, 确实能够以不刷新的形式更新到页面中.
 * 
 * 尝试修改JS文件. 保存过后会发现,这里的页面依然自动刷新,好像并没有之前说HMR的体验.
 * 
 * 为了再次确认,可以尝试先在页面中的编辑器里随意添加一些文字,然后修改代码,保存够厚你就会看到页面自动刷新,
 * 页面中的状态也就丢失了,如下:
 * 
 * 08.5 示例图
 * 
 * 那这是为什么? 为什么CSS文件热替换没出现问题,而到了JS这块就不行了? 又该如何去实现其他类型模块的热替换呢?
 */

/**
 * 四, HMR 的疑问
 * 通过之前的体验我们发现热替换确实提供了非常友好的体验,但是当我们自己去尝试开启HMR过后,效果却不尽如人意.
 * 很明显:
 * HMR并不像Webpack的其他特性一样可以开箱即用,需要有一些额外的操作.
 * 
 * 具体来说,Webpack中的HMR需要我们手动通过代码处理,当模块更新过后,如何把更新后的模块替换到页面中.
 * 
 * 问题1: 为什么开启HMR过后,样式文件的修改就可以直接热更新呢?并没有手动处理样式模块的更新?
 * 答1:  这是因为样式文件是经过 Loader 处理的,在 style-loader 中就已经自动处理了样式文件的热更新,所以
 *       就不需要额外手动处理了.
 * 
 * 问题2: 为什么样式就可以自动处理,而脚本JS就需要自己手动处理?
 * 答2:   这个原因很简单,因为样式模块更新过后,只需要把更新后的CSS及时替换到页面中,它就可以覆盖掉之前的样式,从而
 *        实现更新.
 * 
 *        而编写的JavaScript模块是没有任何规律的,你可能导出的是一个对象,也可能导出的是一个字符串,还可能导出的是
 *        一个函数,使用时也各不相同. 所以 Webpack 面对这些毫无规律的 JS 模块,根本不知道该怎么处理更新后的模块,
 *        也就无法直接实现一个可以通用所有情况的模块替换方案.
 * 
 * 那这就是问什么样式文件可以直接热更新,而JS文件更新后页面还是回退到自动刷新的原因.
 * 
 * 问题3:  那可能还有一些平时使用vue-cli 或者 create-react-app 这种框架脚手架工具的人会说,"我的项目没有手动处理,
 *         JavaScript代码照样可以热替换,也没你说的那么麻烦".
 * 答3:    这是因为使用的是框架,使用框架开发时,我们项目中的每个文件就有了规律,例如React中要求每个模块导出的必须是一个
 *         函数或者类,按这样就可以有通用的替换方法,所以这些工具内部都已经帮你实现了通用的替换操作,自然就不需要手动处理.
 * 
 * 
 * 综上所述,我们还是需要自动手动通过代码来处理,当JavaScript模块更新过后,该如何将更新后的模块替换到页面中.
 * 
 */

/**
 * 五, HMR APIs
 * HotModuleReplacementPlugin 为我们的 JavaScropt 提供了一套用于处理 HMR 的 API, 还需要在自己的代码中,使用这套API
 * 将更新后的模块替换到正在运行的页面中.
 * 
 * 接下来,尝试通过 HMR 的 API 手动处理模块更新后的热替换.
 * 
 * // main.js
 * 这是Webpack打包的入口文件,正常情况下,在这个文件中会加载一些其他模块,正式因为在 main.js 中使用了这些模块,所以一旦这些
 * 模块更新了过后,在 main.js 中就必须重新使用更新后的模块.
 * 
 * 所以,需要在这个文件中添加一些额外的代码,去处理它所依赖的这些模块更新后的热替换逻辑.
 * 
 * 对于开启HMR特性的环境中,可以访问到全局的 module 对象中 hot 成员,这个成员是一个对象,这个对象就是HMR API 的核心对象,
 * 它提供了一个 accept 方法, 用于注册当某个模块更新后的处理函数. accept 方法第一个参数接收的就是所监视的依赖模块路径,
 * 第二个参数就是依赖模块更新后的处理函数.
 * 
 * 那这里先尝试注册 ./editor模块更新过后的处理函数,第一个参数就是editor模块的路径,第二个参数则需要我们传入一个函数,然后
 * 在这个函数中打印一个消息,如下:
 * 
 * //     ./main.js
 * //     ... 原本的业务代码
 * 
 * module.hot.accept('./editor',() => {
 *      // 当 ./editor.js 更新,自动执行此函数
 *      console.log('editor 更新了 ~~')
 * })
 * 
 * 完成过后,在打开命令行终端再次启动 webpack-dev-server 命令,然后回到浏览器,打开工具,
 * 此时,如果修改了 editor 模块,保存过后,浏览器的控制台中就会自动打印上面在代码中添加的消息,
 * 而且浏览器也不会自动刷新了.
 * 
 * 那也就是说一旦这个模块的更新被我们手动处理了,就不会触发自动刷新;反之,如果没有手动处理,热替换
 * 会自动 fallback(回退)到自动刷新.
 */

/**
 * 六, JS模块热替换
 * 了解了这个 HMR API 的作用过后,接下来需要考虑的就是:
 * 具体如何实现 editor 模块的热替换.
 * 
 * 这个模块导出的是一个 createEditor函数,我们先正常把它打印到控制台,然后在模块更新后的处理函数中
 * 再打印一次,如下:
 * 
 * //   ./main.js
 * import createEditor from './editor'
 * 
 * //  ... 原本的业务代码
 * 
 * console.log(createEditor)
 * module.hot.accept('./editor',() => {
 *     console.log(createEditor)
 * })
 * 
 * 这个时候如果你再次修改 editor 模块, 保存过后, 你就会发现当模块更新后,我们这里拿到的 createEditor
 * 函数也就更新为了最新的结果,如下:
 * 
 * 08.6 示例图
 * 
 * 既然 "模块" 文件 "更新后" createEditor "可以自动更新", 那剩下的就好办了. 这里使用 createEditor
 * 函数是用来创建一个界面元素的,那模块一旦更新了,这个元素也就需要重新创建,所以我们这里先移除原来的元素,然
 * 后再调用更新后的createEditor函数,创建一个新的元素追加到页面中,如下:
 * 
 * //   ./main.js
 * import createEditor from './editor'
 * 
 * const editor = createEditor()
 * document.body.appendChild(editor)
 * 
 * //  ...原本的业务代码
 * 
 * // HMR ---------------------
 * module.hot.accept('./editor',() => {
 * 
 *     document.body.removeChild(editor) //移除之前创建的元素
 *     const newEditor = createEditor()  //用新模块创建新元素
 *     document.body.appendChild(newEditor)
 * })
 * 但如果只是这样实现的话,一次热替换结束后,第二次就没法再实现热替换了. 因为第二次执行这个
 * 函数的时候, editor变量指向的元素已经在上一次执行是被移除了,所以这里还应该记录下来每次
 * 热替换创建的新元素,以便于下一次热替换时的操作,如下:
 * 
 * //   ./main.js
 * import createEditor from './editor'
 * 
 * const editor = createEditor()
 * document.body.appendChild(editor)
 * 
 * //  ...原本的业务代码
 * 
 * // HMR ---------------------
 * let lastEditor = editor
 * module.hot.accept('./editor',() => {
 * 
 *     document.body.removeChild(lastEditor) //移除之前创建的元素
 *     lastEditor = createEditor()  //用新模块创建新元素
 *     document.body.appendChild(lastEditor)
 * })
 * 完成以后,再来尝试修改editor模块,此时就应该是正常的热替换效果了,如下:
 * 
 * 08.7 示例图
 */

/**
 * 七, 热替换的状态保持
 * 此时,如果尝试在界面上输入一些内容(形成页面操作状态),然后回到代码中再次修改editor模块,
 * 那此时你仍然会发现问题,由于热替换时,把界面上之前的编辑器元素移除了,替换成了一个新的元素,
 * 所以页面上之前的状态同样会丢失.
 * 
 * 这也就证明我们的热替换还需要改进,必须在替换时把状态保留下来.
 * 
 * 回到main.js中,要想保留这个状态也很简单,就是在替换前先拿到编辑器中的内容,然后替换后在放
 * 回去就行了. 那因为我这里使用的是可编辑元素,而不是文本框,所以需要通过 innerHTML 拿到之前
 * 编辑的内容,然后设置到更新后创建的新元素中,如下:
 * 
 * //   ./main.js
 * import createEditor from './editor'
 * 
 * const editor = createEditor()
 * document.body.appendChild(editor)
 * 
 * //  ...原本的业务代码
 * 
 * // HMR ---------------------
 * let lastEditor = editor
 * module.hot.accept('./editor',() => {
 *     //当editor.js更新,自动执行此函数
 *     //临时记录更新前编辑器内容
 *     const value = lastEditor.innerHTML
 *     //移除更新前的元素
 *     document.body.removeChild(lastEditor) 
 *     //创建新的编辑器
 *     //此时 createEditor 已经是更新过后的函数了
 *     lastEditor = createEditor()
 *     //还原编辑器内容
 *     lastEditor.innerHTML = value
 *     //追加到页面
 *     document.body.appendChild(lastEditor)
 * })
 * 这样就可以解决界面状态保存的问题了
 * 至此,对于editor模块的热替换逻辑就算是全部实现了. 通过这个构成就应该能过
 * 发现,为什么Webpack需要我们自己处理JS模块的热更新了; 因为不同的模块有不同
 * 的情况,在这里处理时肯定也是不同的. 就好像,这里是一个文本编辑器应用,所以需要
 * 保留状态,如果不是这种类型那就不需要这样做,所以说Webpack没法提供一个通用
 * 的JS模块替换方案.
 */

/**
 * 八, 图片模块热替换
 * 相比于JavaScript模块热替换,图片的热替换逻辑就简单多了.
 * 
 * 同样通过 module.hot.accept 注册这个图片模块的热替换处理函数,在这个函数中,
 * 我们只需要重新给图片元素的 src 设置更新后的图片路径就可以了. 因为图片修改过
 * 后图片的文件名发生变化,而这里我们就可以直接得到更新后的路径,所以重新设置图片
 * 的src就能实现图片热替换,如下:
 * 
 * //   ./src/main.js
 * import logo from './icon.png'
 * //   ...其他代码
 * module.hot.accept('./icon.png',() => {
 *     //当 icon.png 更新后执行
 *     //重写设置src会触发图片元素重新加载,从而局部更新图片
 *     img.src = logo
 * })
 */

/**
 * 九,常见问题
 * 问题1, 如果处理热替换的代码(处理函数)中有错误,结果也会导致自动刷新,如下:
 * 这里在处理函数中故意加入一个运行的错误
 * 
 * //   ./src/main.js
 * //   ...其他代码
 * module.hot.accept('./editor',() => {
 *      //刻意造成运行异常
 *      undefined.foo()
 * })
 * 直接测试你会发现 HMR 不会正常工作,而且根本看不到异常,如下:
 * 
 * 08.8 示例图
 * 
 * 这是因为 HMR 过程报错导致 HMR 失败,HMR失败过后,会自动回退到自动刷新,页面一旦自动刷新,
 * 控制台的错误信息就会被清除,这样的话,如果不是很明显的错误,就很难被发现.
 * 
 * 在这种情况下,可以使用 hotOnly 的方式来解决,因为现在使用的hot方式,如果热替换失败就会自动
 * 回退使用自动刷新,而hotOnly的情况下并不会使用自动刷新.
 * 
 * 回到配置文件,这里将devServer中的hot等于true修改为hotOnly等于true,如下:
 * 
 * //  ./webpack.config.js
 * const webpack = require('webpack')
 * module.exports = {
 *    // ...
 *    devServer: {
 *       //只使用 HMR, 不会 fallback 到 live reloading
 *       hotOnly: true
 *    },
 *    plugins: [
 *       // ...
 *       // HMR 特性所需要的插件
 *       new webpack.HotModuleReplacementPlugin()
 *    ]
 * }
 * 配置完成以后,重新启动 webpack-dev-server. 此时我们再去修改代码,无论是否处理了这个代码模块
 * 的热替换逻辑,浏览器都不会自动刷新了,这样的话,热替换逻辑中的错误信息就可以直接看到了,如下;
 * 
 * 08.9 示例图
 * 
 * 
 * 问题2, 对于使用了 HMR API 的代码,如果在没有开启HMR功能的情况下运行Webpack打包,此时运行环境
 * 中就会报出 Cannot read property 'accept' of undefined 的错误,如下:
 * 
 * 08.10 示例图
 * 
 * 原因是 module.hot 是 HMR 插件提供的成员,没有开启这个插件,自然也就没有这个对象.
 * 解决办法:
 * 与在业务代码中判断API兼容一样,先判断是否存在这个对象,然后在去使用就可以了.如下:
 * 
 * // HMR -----------------
 * if(module.hot) { //确保有 HMR API 对象
 *     module.hot.accept('./editor',() => {
 *        // ...
 *     })
 * }
 * 
 * 问题2:
 * 除此之外,可能还有一个问题:
 * 在代码中写了很多与业务功能本身无关的代码,会不会对生产环境有影响?
 * 
 * 答案2: 
 * 通过一个简单的操作来帮你解答,回到配置文件中,确保已经将热替换特性关闭,并且移除掉了
 * HotModuleReplacementPlugin插件,然后打开命令行终端,正常运行一下Webpack打包,
 * 打包过后,找到打包生成的bundle.js文件,然后找到里面 main.js对应的模块,如图:
 * 
 * 08.11 示例图
 * 
 * 你会发现之前编写的处理热替换的代码都被移除掉了,只剩下一个 if(false) 的空判断,这
 * 种没有意义的判断,在压缩过后也会自动去掉,所以根本不会对生产环境有任何影响.
 */

/**
 * 九, 写在最后
 * 以上就是我们对Webpack模块热替换特性做的一些探索,整体下来可能你会觉得HMR比较麻烦,需要写一些
 * 额外的代码,甚至觉得不如不用.
 * 
 * 关于框架的HMR,因为在大多数情况下是开箱即用的.
 * React HMR 方案:https://github.com/gaearon/react-hot-loader
 * Vue.js HRM 方案:https://vue-loader.vuejs.org/guide/hot-reload.html
 */


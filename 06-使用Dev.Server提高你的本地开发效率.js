/**
 * 如何提高开发效率呢?先对一个较为理想的开发环境做出设想:
 * >首先,它必须能够使用HTTP服务运行而不是文件形式预览,这样的话,一来更接近生产环境状态,二来项目可能
 *  需要使用AJAX之类的API,以文件形式访问会产生诸多问题.
 * >其次,在修改完代码过后,Webpack能够自动完成创建,然后浏览器可以即时显示最新的运行结果,这样就大大减少了
 *  了开发过程中额外的重复操作,同时也会让我们更加专注,效率自然得到提升.
 * >最后,还需要能提供Source Map 支持,这样一来,运行过程中出现的错误就可以快速定位到源代码中的位置,而
 *  不是打包后结果中的位置,更便于我们快速定位错误,调试应用.
 * 
 * 主题: 学习如何增强使用Webpack的开发体验
 */

/**
 * 一,Webpack自动编译
 * 如果每次修改完代码,都是通过命令行手动重复运行Webpack命令,从而得到最新的打包结果,那么这样的操作过程根本
 * 没有任何开发体验可言.
 * 
 * 针对上述这个问题,可以使用Webpack CLI提供的另外一种watch工作模式来解决.
 * 在这种模式下,Webpack完成初次构建过后,项目中的源文件被监视,一旦发生任何改动,Webpack都会自动重新
 * 运行打包任务.
 * 
 * 具体的用法也非常简单,就是子启动Webpack时,添加一个 --watch 的CLI参数,这样的话,Webpack就会以监视
 * 模式启动运行. 在打包完成过后,CLI不会立即退出,它会等待文件变化再次工作,直到手动结束它或是出现不可控
 * 的异常.如下命令:
 * >>>>> npx webpack --watch
 * 
 * 
 * 在watch模式下我们就需专注编码,不必再去手动完成编译工作,相比于原始手动操作的方式,有明显进步.
 * 我们还可以再开启另外一个命令性终端,同时以HTTP形式运行我们的应用,然后打开浏览器去预览应用.
 * 
 * 我们还可以再开启另外一个命令行终端,同时以HTTP形式运行我们的应用,然后打开浏览器去预览应用.
 * 我们可以将浏览器移至屏幕的左侧,然后将编辑器移至右侧,此时我们尝试修改源代码,保存过后,以watch模式
 * 工作的Webpack就会自动重新打包,然后我们就可以在浏览器中 "主动刷新" 页面查看最新的结果,如下:
 * >>>>> npx serve dist(output)
 * 
 * 那此时我们的开发体验就是: 修改代码 -> Webpack自动打包 -> 手动舒心浏览器 -> 预览运行结果.
 * 
 * 注意:
 * 这里使用的静态文件服务器是一个npm模块,叫做 serve.
 * 
 * 此时距离我们目标状态还差一点,如果浏览器能够在Webpack打包过后自动刷新,那么开发体验
 * 将会更好一些.
 * 如果你已经了解一个叫作 BrowserSync工具,链接:https://www.browsersync.io/
 * 你应该知道BrowserSync就可以帮我们实现文件变化过后浏览器自动刷新的功能.
 * 
 * 所以,我们就可以使用 BrowserSync 工具替换 serve 工具,启动 HTTP 服务,这里还需要同时监听dist目录下文件的变化,如下:
 * 
 * > 可以先通过 npm 全局安装 browser-sync 模块, 然后再使用这个模块
 * > npm install browser-sync --global
 * > browser-sync dist --watch
 * 
 * > 或者也可以使用 npx 直接使用远端模块
 * > npx browser-sync dist --watch
 * 
 * 启动过后,回到编辑器,然后尝试修改源文件,保存完成以后浏览器就会自动刷新,显示最新结果.
 * 它的原理就是Webpack监视源代码变化,自动打包源代码到dist中,而dist中文件的变化又被
 * BrowserSync监听了,从而实现自动编译并且自动刷新浏览器的功能,整个过程由两个工具分别
 * 监视不同的内容.
 * 
 * 这种watch模式 + BrowserSync 虽然也实现了我们的需求,但是这种方法有很多弊端:
 * > 操作繁琐,我们需要同时使用两个工具,那么需要了解的内容就会更多,学习成本大大提高;
 * > 效率低下,因为整个过程中,Webpack会将文件写入磁盘, BrowserSync 再进行读取,过程
 *   中涉及大量磁盘读写操作,必然会导致效率低下.
 * 
 */

/**
 * 二, Webpack Dev Server
 * 
 */